#!/usr/bin/python3

import os, requests, json, sys
from jinja2 import Environment, FileSystemLoader

'''
pip3 install Jinja2
tested with Elasticsearch 7.16.3 and Grafana 9.0.5
id is generated by the db (dashboard or database???)
uid can be generated by anyone
'''
ID = 0
DATASOURCE_TYPE = "elasticsearch"
DATASOURCE_UID = "datasourceid" 
BASE_URL = "http://admin:admin@localhost:3000/api/"

def delete_api_token(api_id):
	url = BASE_URL + "auth/keys/" + str(api_id)
	data = ""
	res = requests.delete(
		url=url,
		data=data,
		headers={
		    	"Accept": "application/json",
			"Content-Type": "application/json"
		}
	)
	return res.json()

def create_api_token():
	url = BASE_URL + "auth/keys"
	data = r"""
	{
		"name": "dashboard-key",
		"role": "Admin"
	}
	"""
	res = requests.post(
		url=url,
		data=data,
		headers={
		    	"Accept": "application/json",
			"Content-Type": "application/json"
		}
	)
	return res.json()


def post_datasource(api_key, datasource_name):
	#TODO aka does not work
	res = requests.post(
		url=BASE_URL+"datasources",
		data = {
			"name": f"{datasource_name}",
			"type": "elasticsearch",
			"url": "http://localhost:9200",
			"access": "proxy",
                        "basicAuth": r"""false""",
			"jsonData":{
			"timeField": "@timestamp",
			"indexName": "b",
			"esVersion": "7.16.3"
                        }
		},
		headers={
			"Accept": "application/json",
			"Content-Type": "application/json",
			"Authorization": f"Bearer {api_key}"
		}
	)
	print(res.json())
	return res.json()

def postDashboard(url, api_key, dashboard_json):
	res = requests.post(
		url=url,
		data=dashboard_json,
		headers={
			"Accept": "application/json",
			"Content-Type": "application/json",
			"Authorization": f"Bearer {api_key}"
		}
	)
	return res.json()

def get_datasources(url, api_key):
	res = requests.get(
		url=url,
		headers={
			"Accept": "application/json",
			"Content-Type": "application/json",
			"Authorization": f"Bearer {api_key}"
		}
	)
	return res.json()

def get_datasource_uid(api_key, api_token_id, datasource_name):
	res = get_datasources(BASE_URL+"datasources", api_key)
	for ds in res:
		print(ds)
		if ds["name"] == datasource_name:
			return ds["uid"]
	print("Error: data source not found")
	delete_api_token(api_token_id)
	exit(1)

def main():
	if len(sys.argv) != 2:
 		print("Usage: python3 " + sys.argv[0] + " <data_source>")
 		exit(1)
	file_loader = FileSystemLoader('.')
	env = Environment(loader=file_loader)
	template = env.get_template("template.json")
	DATASOURCE_NAME = sys.argv[1]
	api_token_json = create_api_token()
	api_token = api_token_json["key"]
	api_token_id = api_token_json["id"]
	datasource_name = sys.argv[1]
	title = "spirit-box-"+datasource_name
	DATASOURCE_UID = get_datasource_uid(api_token, api_token_id, datasource_name)

	output = "{\"dashboard\":"+template.render(
		id=ID,
		title=title,
		datasource_type=DATASOURCE_TYPE,
 	 	datasource_uid=DATASOURCE_UID
	)+"}"
	delete_api_token(api_token_id)
	res = postDashboard(BASE_URL+"dashboards/db", api_token, output)
	print(res)

def stub():
	token = create_api_token()["key"]
	print(get_datasource_uid(token))

main()
